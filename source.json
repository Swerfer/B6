{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/proxy/Clones.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Create2.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(add(buffer, 0x20), length)\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(add(buffer, 0x20), offset))\n        }\n    }\n}\n"},"contracts/MissionFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// #region Introduction\r\n/**\r\n * © 2025 Be Brave Be Bold Be Banked™ | B6 Labs™ – Swerfer\r\n * All rights reserved.\r\n *\r\n * @title   Be Brave Be Bold Be Banked™ – Mission & Factory Architecture\r\n * @author  B6 Labs™ – Swerfer\r\n * @notice\r\n *  ▸ **B6** – a decentralized gaming platform that runs on the Cronos blockchain.\r\n *  ▸ **Mission** – an on-chain, time-boxed competition where players enroll\r\n *    by paying a fixed CRO fee and race through multiple payout rounds.  \r\n *  ▸ **MissionFactory** – the manager contract that deploys Mission clones,\r\n *    enforces enrolment limits, routes fees, and recycles funds for future\r\n *    games.  Each Mission clone is created with `clone.initialize(...)`\r\n *    and thereafter calls back into the factory for bookkeeping.\r\n *\r\n * ## 📖 Mission Overview\r\n * A Mission is a competitive game with three consecutive phases:\r\n *\r\n * 1. **Enrollment** (`enrollmentStart → enrollmentEnd`)  \r\n *    • Players pay `enrollmentAmount` once.  \r\n *    • Anti-addiction limits: max `weeklyLimit` per 7 days & `monthlyLimit`\r\n *      per 30 days – enforced by the factory.  \r\n *    • Mission requires `enrollmentMinPlayers` to arm; max is\r\n *      `enrollmentMaxPlayers`.\r\n *\r\n * 2. **Active** (`missionStart → missionEnd`)  \r\n *    • Consists of `missionRounds` payout rounds.  \r\n *    • A cooldown: Default: 1 min after normal rounds, 1 min before the final round.  \r\n *    • A player can win **once per mission**.  \r\n *    • Each round’s payout = time-progress since last claim × `croStart` / 100.\r\n *\r\n * 3. **End / Settle**  \r\n *    • Ends when all rounds are claimed **or** `missionEnd` passes.  \r\n *    • Owner/authorized may call `forceFinalizeMission()` if necessary.  \r\n *    • Remaining CRO is distributed via `_withdrawFunds()`.\r\n *\r\n * ## 🏭 MissionFactory Responsibilities\r\n * • **Deployment** – clones the Mission implementation (EIP-1167).  \r\n * • **Status Tracking** – every Mission reports its status back via\r\n *   `setMissionStatus`; the factory stores this for dashboards and queries.  \r\n * • **Enrollment Limits** – global weekly / monthly caps checked in\r\n *   `canEnroll()` and recorded with `recordEnrollment()`.  \r\n * • **Reserved Funds Pool** – collects 75 % of leftover CRO from finished\r\n *   missions and redistributes part of it to newly-created games.  \r\n * • **Authorization Layer** – owner can whitelist helpers; `onlyOwnerOrAuthorized`\r\n *   guards all admin actions (create, withdraw, config).  \r\n * • **Registry** – `isMission[addr]` and `missionStatus[addr]` let the factory\r\n *   authenticate mission callbacks and list active / ended missions.\r\n *\r\n * ## 💰 Fee Split\r\n * • 25 % of post-game pot → factory owner.  \r\n * • 75 %                  → factory reserve (`reservedFunds[missionType]`).\r\n *\r\n * ## 🔄 Refund & Failure Logic\r\n * • If a mission never arms (not enough players) all enrollments are refunded.  \r\n * • If CRO transfers to players fail, amounts are parked in\r\n *   `failedRefundAmounts`; .\r\n *\r\n * ## ⚠️ Key Constraints\r\n * • `missionRounds` ≥ `enrollmentMinPlayers`.  \r\n * • A player can win at most once per mission.\r\n *\r\n * ## 🛠 Admin Functions (Mission level)\r\n * • `checkMissionStartCondition`, `forceFinalizeMission`, `withdrawFunds`, `refundPlayers`.\r\n *\r\n * ## ✅ Security\r\n * • OpenZeppelin **Ownable** + **ReentrancyGuard**.  \r\n * • CRO transfers via `.call{value: …}` to forward all gas and avoid\r\n *   griefing.  \r\n * • Factory verifies that callbacks come from registered missions\r\n *   (`onlyMission`).\r\n *\r\n * @dev Each Mission is an EIP-1167 minimal proxy deployed by MissionFactory.\r\n */\r\n// #endregion\r\n\r\n\r\npragma solidity ^0.8.30;\r\n\r\n\r\n// #region Imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nusing Strings for uint256;\r\n// #endregion\r\n\r\n\r\n\r\n\r\n\r\n// #region Global Enums\r\n/**\r\n * @dev Enum to represent the type of mission.\r\n * The mission can be one of several types: Custom, Hourly, QuarterDaily, BiDaily, Daily, Weekly, or Monthly.\r\n * The default use for each type is defined in the comments but is set in the dApp UI and can vary.\r\n */\r\nenum MissionType {\r\n    Custom,         // No default use, completely custom\r\n    Hourly,         // Default use:  1 day  enrollment, 1 hour arming,  1 hour  rounds\r\n    QuarterDaily,   // Default use:  1 day  enrollment, 1 hour arming,  6 hours rounds\r\n    BiDaily,        // Default use:  1 day  enrollment, 1 hour arming, 12 hours rounds\r\n    Daily,          // Default use:  1 day  enrollment, 1 hour arming, 24 hours rounds\r\n    Weekly,         // Default use:  1 week enrollment, 1 hour arming,  7 days  rounds\r\n    Monthly         // Default use:  1 week enrollment, 1 hour arming, 30 days  rounds\r\n}\r\n\r\n/**\r\n * @dev Enum to represent the status of a mission.\r\n * The mission can be in one of several states: Pending, Enrolling, Active, Paused, Ended, or Failed.\r\n */\r\nenum Status     {\r\n    Pending,        // Mission is created but not yet enrolling\r\n    Enrolling,      // Mission is open for enrollment, waiting for players to join\r\n    Arming,         // Mission is armed and ready to start\r\n    Active,         // Mission is currently active and players can participate\r\n    Paused,         // Mission is paused, no further actions can be taken\r\n    PartlySuccess,  // Mission has ended with some players winning, but not all rounds were claimed\r\n    Success,        // Mission has ended successfully, all rounds were claimed\r\n    Failed          // Mission has failed, no players won or not enough players enrolled\r\n}\r\n\r\n/**\r\n * @dev Enum to represent the enrollment limits for a mission.\r\n * The limits can be None, Weekly, or Monthly.\r\n */\r\nenum Limit      { \r\n    None,       // No limit breached\r\n    Weekly,     // Weekly limit breached\r\n    Monthly     // Monthly limit breached\r\n}\r\n// #endregion\r\n\r\n\r\n\r\n\r\n\r\n// #region Contr. MissionFactory\r\ncontract MissionFactory is Ownable, ReentrancyGuard {\r\n    using Clones    for address;\r\n\r\n\r\n\r\n    // #region Events\r\n    /** \r\n     * @dev Events emitted by the MissionFactory contract.\r\n     * These events are used to log important actions and state changes within the contract.\r\n     */\r\n    event MissionCreated(\r\n        address indexed mission,\r\n        string          name,\r\n        MissionType     missionType,\r\n        uint256         enrollmentStart,\r\n        uint256         enrollmentEnd,\r\n        uint8           minPlayers,\r\n        uint8           maxPlayers,\r\n        uint8           roundPauseDuration,\r\n        uint8           lastRoundPauseDuration,\r\n        uint256         enrollmentAmount,\r\n        uint256         missionStart,\r\n        uint256         missionEnd,\r\n        uint8           missionRounds\r\n    );\r\n    event AuthorizedAddressAdded                (address        indexed addr                                                                        );\r\n    event AuthorizedAddressRemoved              (address        indexed addr                                                                        );\r\n    event MissionFundsRegistered                (uint256                amount,         MissionType indexed missionType,    address indexed sender  );\r\n    event FundsWithdrawn                        (address        indexed to,             uint256             amount                                  );    \r\n    event OwnershipTransferProposed             (address        indexed proposer,       address             newOwner,       uint256 timestamp       );\r\n    event OwnershipTransferConfirmed            (address        indexed confirmer,      address             newOwner,       uint256 timestamp       );\r\n    event EnrollmentLimitUpdated                (uint8                  newWeekly,      uint8               newMonthly                              );\r\n    event EnrollmentRecorded                    (address        indexed user,           uint256             timestamp                               );\r\n    event MissionStatusUpdated                  (address        indexed mission,        uint8       indexed fromStatus,     uint8   indexed toStatus, uint256        timestamp);\r\n    event MissionFinalized                      (address        indexed mission,        uint8       indexed finalStatus,    uint256 timestamp       );\r\n    event EnrollmentReverted                    (address        indexed user,           uint256             timestampRemoved                        );\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Modifiers\r\n    /**\r\n     * @dev Modifier that allows only the owner or an authorized address to call.\r\n     */\r\n    modifier onlyOwnerOrAuthorized() {\r\n        require(\r\n            msg.sender == owner() || authorized[msg.sender],    // Check if the caller is the owner or an authorized address\r\n            \"Not owner or MissionFactory authorized\"\r\n        );\r\n        _;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Modifier that allows only a valid mission contract to call.\r\n     * This ensures that the caller is a contract that has been registered as a mission.\r\n     */\r\n\tmodifier onlyMission() {\r\n        require(\r\n            isMission[msg.sender],                                      // Check if the caller is a registered mission\r\n            \"MissionFactory: caller is not a valid mission contract\"\r\n        );\r\n        _;\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region State Variables\r\n    /**\r\n     * @dev State variables for the MissionFactory contract.\r\n     * These variables store the state of the contract, including authorized addresses, reserved funds, mission statuses, and the implementation address for missions.\r\n     */\r\n    address[]                               public  missions;                                   // Array to hold all mission addresses\r\n    uint8                                   public  weeklyLimit = 7;                            // Maximum number of missions a player can enroll in per week\r\n    uint8                                   public  monthlyLimit = 15;                          // Maximum number of missions a player can enroll in per month\r\n    uint256                                 public  totalMissionFunds;                          // Total funds registered by missions\r\n    uint256                                 public  totalOwnerEarnedFunds;                      // Total funds earned by the owner from missions\r\n    uint256                                 public  totalMissionSuccesses;                      // Total number of successful missions\r\n    uint256                                 public  totalMissionFailures;                       // Total number of failed missions\r\n    address                                 public immutable missionImplementation;             // Address of the Mission implementation contract for creating new missions\r\n    uint256                                 public constant OWNERSHIP_PROPOSAL_WINDOW = 1 days; // Duration for ownership proposal validity\r\n    uint256                                 public proposalTimestamp;                           // The timestamp the proposal was made\r\n    address                                 public proposedNewOwner;                            // The proposed new owner's address     \r\n    address                                 public proposalProposer;                            // The proposer's address\r\n    mapping(address => bool)                public  authorized;                                 // Mapping to track authorized addresses\r\n    mapping(address => bool)                public  isMission;                                  // ↪ quick “is this address a mission?” lookup\r\n    mapping(address => Status)              public  missionStatus;                              // Mapping to hold the status of each mission\r\n    mapping(MissionType => uint256)         public  reservedFunds;                              // Track funds by type\r\n    mapping(address => uint256[])           private _enrollmentHistory;                         // Store timestamps\r\n    mapping(address => string)              public missionNames;                                // Store mission names\r\n    mapping(MissionType => uint256)         public missionTypeCounts;                           // Store per mission type the mission type count\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Constructor\r\n    /**\r\n     * @dev Struct to hold information about players who won the mission.\r\n     * Contains the player's address and the amount they won.\r\n     */\r\n    constructor(address _impl) Ownable(msg.sender) {\r\n        require(_impl != address(0), \"impl zero\");\r\n        missionImplementation = _impl;\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Helper functions\r\n    /**\r\n     * @dev Function to convert mission types to human readable names \r\n     */  \r\n    function _toHumanReadableName(MissionType t) internal pure returns (string memory) {\r\n        if (t == MissionType.Hourly)         return \"Hourly\";\r\n        if (t == MissionType.QuarterDaily)   return \"QuarterDaily\";\r\n        if (t == MissionType.BiDaily)        return \"BiDaily\";\r\n        if (t == MissionType.Daily)          return \"Daily\";\r\n        if (t == MissionType.Weekly)         return \"Weekly\";\r\n        if (t == MissionType.Monthly)        return \"Monthly\";\r\n        return \"Custom\";                      \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the time until the next weekly slot for a user.\r\n     * This function calculates the time remaining until the next weekly slot based on the user's enrollment history.\r\n     * @param user The address of the user to check.\r\n     * @return The number of seconds until the next weekly slot.\r\n     */\r\n    function secondsTillWeeklySlot(address user)                            external view returns (uint256) {\r\n        uint256 nowTs = block.timestamp;                                // Get the current timestamp\r\n        uint256[] storage h = _enrollmentHistory[user];                 // Get the user's enrollment history\r\n        uint256 earliest;                                               // Variable to store the earliest enrollment time within the next week\r\n        for (uint i = 0; i < h.length; i++) {                           // Loop through the enrollment history  \r\n            if (h[i] + 7 days > nowTs) {\r\n                if (earliest == 0 || h[i] < earliest) earliest = h[i];  // If this is the first valid enrollment or earlier than the current earliest, update earliest\r\n            }\r\n        }\r\n        return earliest == 0 ? 0 : earliest + 7 days - nowTs;    // If no valid enrollment found, return 0; otherwise, return the time until the next weekly slot\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the time until the next monthly slot for a user.\r\n     * This function calculates the time remaining until the next monthly slot based on the user's enrollment history.\r\n     * @param user The address of the user to check.\r\n     * @return The number of seconds until the next monthly slot.\r\n     */\r\n    function secondsTillMonthlySlot(address user)                           external view returns (uint256) {\r\n        uint256 nowTs = block.timestamp;                                // Get the current timestamp\r\n        uint256[] storage h = _enrollmentHistory[user];                 // Get the user's enrollment history\r\n        uint256 earliest;                                               // Variable to store the earliest enrollment time within the next month \r\n        for (uint i = 0; i < h.length; i++) {                           // Loop through the enrollment history  \r\n            if (h[i] + 30 days > nowTs) {\r\n                if (earliest == 0 || h[i] < earliest) earliest = h[i];  // If this is the first valid enrollment or earlier than the current earliest, update earliest\r\n            }\r\n        }\r\n        return earliest == 0 ? 0 : earliest + 30 days - nowTs;   // If no valid enrollment found, return 0; otherwise, return the time until the next monthly slot\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n    \r\n    // #region Anti-addiction Func.\r\n    /**\r\n     * @dev Sets the weekly and monthly enrollment limits.\r\n     * This function allows the owner or an authorized address to set the limits for how many missions a user can enroll in per week and per month.\r\n     * @param _weekly The new weekly limit for mission enrollments.\r\n     * @param _monthly The new monthly limit for mission enrollments.\r\n     */\r\n    function setEnrollmentLimits(uint8 _weekly, uint8 _monthly)             external onlyOwnerOrAuthorized {\r\n        weeklyLimit = _weekly;\r\n        monthlyLimit = _monthly;\r\n        emit EnrollmentLimitUpdated(_weekly, _monthly);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a user can enroll in a mission based on anti-addiction limits.\r\n     * This function checks the user's enrollment history to determine if they have exceeded the weekly or monthly limits.\r\n     * @param user The address of the user to check.\r\n     * @return ok A boolean indicating if the user can enroll.\r\n     * @return breach A Limit enum indicating which limit is breached, if any.\r\n     */\r\n    function canEnroll(address user)                                        public view returns (bool ok, Limit breach) {\r\n        uint256 nowTs = block.timestamp;                                    // Get the current timestamp\r\n        uint256 weeklyCount;                                                // Count of enrollments in the last 7 days  \r\n        uint256 monthlyCount;                                               // Count of enrollments in the last 30 days\r\n        uint256 earliest7d;                                                 // Earliest enrollment timestamp in the last 7 days\r\n        uint256 earliest30d;                                                // Earliest enrollment timestamp in the last 30 days    \r\n\r\n        uint256[] storage h = _enrollmentHistory[user];                     // Get the user's enrollment history\r\n        for (uint256 i; i < h.length; ++i) {                                // Loop through the enrollment history\r\n            uint256 t = h[i];\r\n            if (t + 30 days > nowTs) {                                      // If the enrollment is within the last 30 days\r\n                ++monthlyCount;\r\n                if (earliest30d == 0 || t < earliest30d) earliest30d = t;   // Update the earliest enrollment timestamp in the last 30 days\r\n                if (t + 7 days > nowTs) {\r\n                    ++weeklyCount;\r\n                    if (earliest7d == 0 || t < earliest7d) earliest7d = t;  // Update the earliest enrollment timestamp in the last 7 days\r\n                }\r\n            }\r\n        }\r\n\r\n        bool wk = weeklyCount  >= weeklyLimit;                              // Check if the weekly limit is breached    \r\n        bool mo = monthlyCount >= monthlyLimit;                             // Check if the monthly limit is breached\r\n\r\n        if (!wk && !mo) return (true,  Limit.None);                         // If neither limit is breached, return true with Limit.None\r\n\r\n        if (wk && !mo)  return (false, Limit.Weekly);                       // If only the weekly limit is breached, return false with Limit.Weekly\r\n        if (mo && !wk)  return (false, Limit.Monthly);                      // If only the monthly limit is breached, return false with Limit.Monthly   \r\n\r\n        // both breached: compare remaining seconds\r\n        uint256 leftW = earliest7d  +  7 days - nowTs;                      // Calculate the time left until the next weekly slot\r\n        uint256 leftM = earliest30d + 30 days - nowTs;                      // Calculate the time left until the next monthly slot\r\n        return (false, leftM > leftW ? Limit.Monthly : Limit.Weekly);       // If both limits are breached, return the one with the shorter time left\r\n    }\r\n\r\n    /**\r\n     * @dev Records the enrollment of a user in a mission.\r\n     * This function is called when a user enrolls in a mission.\r\n     * It updates the user's enrollment history and emits an event.\r\n     * @param user The address of the user enrolling in the mission.\r\n     */\r\n    function recordEnrollment(address user)                                 external {\r\n        uint256 nowTs = block.timestamp;                                            // Get the current timestamp\r\n        require(missionStatus[msg.sender] == Status.Enrolling, \"Invalid caller\");   // Ensure the caller is in the Enrolling status\r\n\r\n        uint256 cutoff = nowTs - 30 days;                                           // Calculate the cutoff timestamp for pruning  \r\n        uint256[] storage history = _enrollmentHistory[user];                       // Get the user's enrollment history    \r\n        uint256 i = 0;\r\n        while (i < history.length && history[i] < cutoff) {                         // Loop through the history to find entries older than 30 days\r\n            i++;    \r\n        }\r\n        if (i > 0) {                                                                // If there are old entries, remove them\r\n            for (uint256 j = 0; j < history.length - i; j++) {                      // Shift remaining entries to the left\r\n                history[j] = history[j + i];\r\n            }\r\n            for (uint256 k = 0; k < i; k++) {                                       // Remove the last i entries   \r\n                history.pop();\r\n            }\r\n        }\r\n\r\n        history.push(nowTs);                                                        // Add the current timestamp to the enrollment history  \r\n        emit EnrollmentRecorded(user, nowTs);                                       // Emit an event for the enrollment record\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the player's enrollment limits and time until next slots.\r\n     * This function calculates the number of enrollments a player has made in the last week and month,\r\n     * and returns the limits and time until the next slots.\r\n     * @param player The address of the player to check.\r\n     * @return weekUsed The number of enrollments used in the last week.\r\n     * @return weekMax The maximum number of enrollments allowed in a week.\r\n     * @return monthUsed The number of enrollments used in the last month.\r\n     * @return monthMax The maximum number of enrollments allowed in a month.\r\n     * @return secToWeek The number of seconds until the next weekly slot.\r\n     * @return secToMonth The number of seconds until the next monthly slot.\r\n     */\r\n    function getPlayerLimits(address player)                                external view returns \r\n        (uint8 weekUsed, uint8 weekMax, uint8 monthUsed, uint8 monthMax, uint256 secToWeek, uint256 secToMonth) {\r\n        uint256 nowTs = block.timestamp;                                        // Get the current timestamp\r\n        uint256[] storage h = _enrollmentHistory[player];                       // Get the player's enrollment history\r\n        uint256 weeklyCount;                                                    // Count of enrollments in the last 7 days\r\n        uint256 monthlyCount;                                                   // Count of enrollments in the last 30 days\r\n        uint256 earliest7d;                                                     // Earliest enrollment timestamp in the last 7 days\r\n        uint256 earliest30d;                                                    // Earliest enrollment timestamp in the last 30 days\r\n        for (uint256 i; i < h.length; ++i) {                                    // Loop through the enrollment history\r\n            uint256 t = h[i];\r\n            if (t + 30 days > nowTs) {                                          // If the enrollment is within the last 30 days\r\n                ++monthlyCount;\r\n                if (earliest30d == 0 || t < earliest30d) earliest30d = t;       // Update the earliest enrollment timestamp in the last 30 days\r\n                if (t + 7 days > nowTs) {\r\n                    ++weeklyCount;\r\n                    if (earliest7d == 0 || t < earliest7d) earliest7d = t;      // Update the earliest enrollment timestamp in the last 7 days\r\n                }\r\n            }\r\n        }\r\n        weekUsed   = uint8(weeklyCount);                                        // Convert weekly count to uint8\r\n        weekMax    = weeklyLimit;                                               // Get the maximum weekly limit\r\n        monthUsed  = uint8(monthlyCount);                                       // Convert monthly count to uint8\r\n        monthMax   = monthlyLimit;                                              // Get the maximum monthly limit\r\n        secToWeek  = earliest7d  == 0 ? 0 : earliest7d  + 7 days - nowTs;       // Calculate seconds until next weekly slot\r\n        secToMonth = earliest30d == 0 ? 0 : earliest30d + 30 days - nowTs;      // Calculate seconds until next monthly slot\r\n        return (weekUsed, weekMax, monthUsed, monthMax, secToWeek, secToMonth); // Return the limits and time until next slots\r\n    }\r\n\r\n    /**\r\n     * @dev Undoes a user's enrollment in a mission within a specified time window.\r\n     * This function is called by a mission to remove a user's enrollment record if they are refunded.\r\n     * It searches the user's enrollment history for a timestamp within the specified window and removes it.\r\n     * @param user The address of the user whose enrollment is to be undone.\r\n     * @param startTs The start timestamp of the enrollment window.\r\n     * @param endTs The end timestamp of the enrollment window.\r\n     */\r\n    function undoEnrollmentInWindow(address user, uint256 startTs, uint256 endTs) external onlyMission {\r\n        require(user != address(0), \"Invalid user\");\r\n        uint256[] storage h = _enrollmentHistory[user];\r\n        uint256 len = h.length;\r\n        if (len == 0) return;\r\n\r\n        // Remove exactly one timestamp that falls inside this mission’s enrollment window.\r\n        for (uint256 i = 0; i < len; ++i) {\r\n            uint256 t = h[i];\r\n            if (t >= startTs && t <= endTs) {\r\n                // Keep chronological order (important for pruning logic): shift left, then pop.\r\n                for (uint256 j = i; j + 1 < len; ++j) {\r\n                    h[j] = h[j + 1];\r\n                }\r\n                h.pop();\r\n                emit EnrollmentReverted(user, t);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Admin Functions\r\n    /**\r\n     * @dev Adds an address to the list of authorized addresses.\r\n     * @param account The address to authorize.\r\n     */\r\n    function addAuthorizedAddress(address account)                          external onlyOwnerOrAuthorized {\r\n        require(account != address(0),  \"Invalid address\");                         // Ensure the account is valid\r\n        require(!authorized[account],   \"Already authorized\");                      // Ensure the account is not already authorized\r\n        authorized[account] = true;                                                 // Add authorization for the account  \r\n        emit AuthorizedAddressAdded(account);                                       // Emit event for addition of authorization\r\n    }\r\n\r\n    /**\r\n     * @dev Removes authorization for an address.\r\n     * @param account The address to remove authorization from.\r\n     */\r\n    function removeAuthorizedAddress(address account)                       external onlyOwnerOrAuthorized {\r\n        require(account != address(0),  \"Invalid address\");                         // Ensure the account is valid\r\n        require(authorized[account],    \"Not authorized\");                          // Ensure the account is currently authorized\r\n        authorized[account] = false;                                                // Remove authorization for the account\r\n        emit AuthorizedAddressRemoved(account);                                     // Emit event for removal of authorization\r\n    }\r\n\r\n    /**\r\n     * @dev Proposes a transfer of ownership to a new address.\r\n     * @param newOwner The address of the new owner.\r\n     * If the owner is not available anymore or lost access, this function allows an authorized address to propose a new owner.\r\n     */\r\n    function proposeOwnershipTransfer(address newOwner)                     external onlyOwnerOrAuthorized {\r\n        uint256 nowTs = block.timestamp;                                // Get the current timestamp\r\n        require(newOwner != address(0), \"Invalid new owner\");           // Ensure the new owner is a valid address\r\n        proposedNewOwner = newOwner;\r\n        proposalProposer = msg.sender;\r\n        proposalTimestamp = block.timestamp;\r\n        emit OwnershipTransferProposed(msg.sender, newOwner, nowTs);    // Emit event for ownership transfer proposal\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms the ownership transfer to a new address.\r\n     * This function allows a 2nd authorized address to confirm the ownership transfer.\r\n     */\r\n    function confirmOwnershipTransfer()                                     external onlyOwnerOrAuthorized {\r\n        uint256 nowTs = block.timestamp;                                                                // Get the current timestamp\r\n        require(proposalProposer != msg.sender, \"Cannot confirm your own proposal\");                    // Ensure the confirmer is not the proposer\r\n        require(block.timestamp <= proposalTimestamp + OWNERSHIP_PROPOSAL_WINDOW, \"Proposal expired\");  // Ensure the proposal is still valid within the proposal window\r\n\r\n        // Transfer ownership\r\n        _transferOwnership(proposedNewOwner);                                                           // Transfer ownership to the new owner   \r\n\r\n        emit OwnershipTransferConfirmed(msg.sender, proposedNewOwner, nowTs);                           // Emit event for ownership transfer confirmation\r\n        // Cleanup\r\n        delete proposedNewOwner;                                                                        // Delete the new owner\r\n        delete proposalProposer;                                                                        // Delete the proposal proposer\r\n        delete proposalTimestamp;                                                                       // Delete the proposal timestamp\r\n\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Core Factory Func.\r\n    /**\r\n     * @dev Creates a new mission with the specified parameters.\r\n     * @param _missionType              The type of the mission.\r\n     * @param _enrollmentStart          The start time for enrollment.\r\n     * @param _enrollmentEnd            The end time for enrollment.\r\n     * @param _enrollmentAmount         The amount required for enrollment.\r\n     * @param _enrollmentMinPlayers     The minimum number of players required to start the mission.\r\n     * @param _enrollmentMaxPlayers     The maxnimum number of players required to start the mission.\r\n     * @param _roundPauseDuration       The duration of pause between rounds in seconds.\r\n     * @param _lastRoundPauseDuration   The duration of pause before the last round in seconds\r\n     * @param _missionStart             The start time for the mission.\r\n     * @param _missionEnd               The end time for the mission.\r\n     * @param _missionRounds            The number of rounds in the mission.\r\n     */\r\n    function createMission (\r\n        MissionType     _missionType,           // Type of the mission\r\n        uint256         _enrollmentStart,       // Start time for enrollment\r\n        uint256         _enrollmentEnd,         // End time for enrollment\r\n        uint256         _enrollmentAmount,      // Amount required for enrollment\r\n        uint8           _enrollmentMinPlayers,  // Minimum number of players required to start the mission\r\n        uint8           _enrollmentMaxPlayers,  // Maximum number of players required to start the mission\r\n        uint8           _roundPauseDuration,    // Duration of pause between rounds in seconds\r\n        uint8           _lastRoundPauseDuration,// Duration of pause before the last round in seconds\r\n        uint256         _missionStart,          // Start time for the mission\r\n        uint256         _missionEnd,            // End time for the mission\r\n        uint8           _missionRounds,         // Number of rounds in the mission\r\n        string calldata _missionName            // The mission name (optional)\r\n        ) external payable onlyOwnerOrAuthorized nonReentrant returns (address, string memory) {\r\n            require(_missionRounds          >= 5,                       \"Mission rounds must be greater than or equal to 5\");               // Ensure mission rounds is greater than or equal to 5\r\n            require(_enrollmentMinPlayers   >= _missionRounds,          \"Minimum players must be greater than or equal to mission rounds\"); // Ensure minimum players is at least equal to mission rounds\r\n            require(_enrollmentMaxPlayers   >= _enrollmentMinPlayers,   \"Maximum players must be greater than or equal to minimum players\");// Ensure maximum players is at least equal to minimum players\r\n            require(_enrollmentStart        <  _enrollmentEnd,          \"Enrollment start must be before end\");                             // Ensure enrollment start is before end\r\n            require(_missionStart           >= _enrollmentEnd,          \"Mission start must be on or after enrollment end\");                // Ensure mission start is on or after enrollment end\r\n            require(_missionEnd             >  _missionStart,           \"Mission start must be before end\");                                // Ensure mission start is before end\r\n            require(_enrollmentAmount       >  0,                       \"Enrollment amount must be greater than zero\");                     // Ensure enrollment amount is greater than zero\r\n            require(_roundPauseDuration     >= 60,                      \"Round pause duration must be at least 60 seconds\");                // Ensure round pause duration is at least 1 minute\r\n            require(_lastRoundPauseDuration >= 60,                      \"Last round pause duration must be at least 60 seconds\");           // Ensure last round pause duration is at least 1 minute\r\n\r\n\t\t\taddress clone = missionImplementation.clone(); \t    // EIP-1167 minimal proxy\r\n\r\n            // Increment mission type counter\r\n            missionTypeCounts[_missionType]++;                          // Increase mission counts by 1 and store for the mission type\r\n            string memory _finalName = bytes(_missionName).length > 0   // Check if mission name is not \"\"\r\n                ? _missionName                                          // Not empty --> the supplied name\r\n                : string(abi.encodePacked(\r\n                    _toHumanReadableName(_missionType),\r\n                    \" - \",\r\n                    missionTypeCounts[_missionType].toString()  // \"\" --> calculated mission name\r\n                ));\r\n\r\n            isMission[clone]     = true;                        // mark as a valid mission\r\n            missionStatus[clone] = Status.Pending;              // placeholder so first callback passes onlyMission\r\n            missionNames[clone] = _finalName;                   // Store the supplied name or calculated name if nothing supplied\r\n\r\n            Mission(payable(clone)).initialize{value: msg.value} (\r\n\t\t\t\towner(),\t\t\t\t\t\t\t\t\t    // Set the owner of the mission to the owner of MissionFactory\r\n\t\t\t\taddress(this),\t\t\t\t\t\t\t\t    // Set the MissionFactory address\r\n                _missionType,                                   // Set the type of the mission\r\n                _enrollmentStart,                               // Set the enrollment start time\r\n                _enrollmentEnd,                                 // Set the enrollment end time\r\n                _enrollmentAmount,                              // Set the enrollment amount\r\n                _enrollmentMinPlayers,                          // Set the minimum players required\r\n                _enrollmentMaxPlayers,                          // Set the maximum players allowed\r\n                _roundPauseDuration,                            // Set the pause duration between rounds\r\n                _lastRoundPauseDuration,                        // Set the pause duration before the last round\r\n                _missionStart,                                  // Set the mission start time\r\n                _missionEnd,                                    // Set the mission end time\r\n                _missionRounds,                                 // Set the number of rounds in the mission\r\n                _finalName                                      // The supplied name or calculated name if nothing supplied\r\n            );\r\n\r\n        missions.push(clone);                                   // Add the new mission to the list of missions\r\n        emit MissionCreated(\r\n            clone,\r\n            _finalName,\r\n            _missionType,\r\n            _enrollmentStart,\r\n            _enrollmentEnd,\r\n            _enrollmentMinPlayers,\r\n            _enrollmentMaxPlayers,\r\n            _roundPauseDuration,\r\n            _lastRoundPauseDuration,\r\n            _enrollmentAmount,\r\n            _missionStart,\r\n            _missionEnd,\r\n            _missionRounds\r\n        );               // Emit event for mission creation\r\n\r\n        // Calculate allocation based on mission type\r\n        uint256 allocation = reservedFunds[_missionType] / 4;   // Missions get 1/4th of the reserved funds\r\n\r\n        if (allocation > 0 && address(this).balance >= allocation) {\r\n            reservedFunds[_missionType] -= allocation;\r\n            Mission(payable(clone)).increasePot{value: allocation}();   // Sends CRO and updates mission accounting\r\n        }\r\n\r\n        return (clone, _finalName);\t\t\t\t\t\t                            // Return the address of the newly created mission\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the status of a mission.\r\n     * @param newStatus The new status to set for the mission.\r\n     */\r\n    function setMissionStatus(Status newStatus) external onlyMission {\r\n        Status fromStatus = missionStatus[msg.sender];\r\n        missionStatus[msg.sender] = newStatus;\r\n\r\n        if (newStatus == Status.Success) {\r\n            totalMissionSuccesses++;\r\n        } else if (newStatus == Status.Failed) {\r\n            totalMissionFailures++;\r\n        }\r\n\r\n        emit MissionStatusUpdated(\r\n            msg.sender,\r\n            uint8(fromStatus),\r\n            uint8(newStatus),\r\n            block.timestamp\r\n        );\r\n\r\n        // Ended statuses: PartlySuccess (=5), Success (=6), Failed (=7)\r\n        if (\r\n            newStatus == Status.PartlySuccess ||\r\n            newStatus == Status.Success ||\r\n            newStatus == Status.Failed\r\n        ) {\r\n            emit MissionFinalized(msg.sender, uint8(newStatus), block.timestamp);\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Financial Functions\r\n    /**\r\n     * @dev Registers mission funds for a specific mission type.\r\n     * @param missionType The type of the mission.\r\n     */\r\n    function registerMissionFunds(MissionType missionType)                  external payable onlyMission nonReentrant {\r\n        require(msg.value > 0, \"Amount must be greater than zero\");                                                         // Ensure the amount is greater than zero\r\n        bool isEndedMission = missionStatus[msg.sender] == Status.Success || missionStatus[msg.sender] == Status.Failed;    // Check if the mission has ended successfully or failed\r\n        require(isEndedMission, \"Caller not a mission\");                                                                    // Ensure the caller is a valid mission that has ended \r\n        reservedFunds[missionType] += msg.value;                                                                            // Add the amount to the reserved funds for the specified mission type\r\n        totalMissionFunds += msg.value;                                                                                     // Update the total mission funds\r\n        totalOwnerEarnedFunds += msg.value / 3;                                                                             // Update the total funds earned by the owner (25% of the amount)\r\n        emit MissionFundsRegistered(msg.value, missionType, msg.sender);                                                    // Emit an event for the registered mission funds\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the breakdown of reserved funds for each mission type.\r\n     * This function returns an array containing the reserved funds for each mission type.\r\n     * @return breakdown An array containing the reserved funds for each mission type.\r\n     */\r\n    function reservedFundsBreakdown()                                       external view returns (uint256[7] memory) {\r\n        uint256[7] memory breakdown;                        // Array to hold the breakdown of reserved funds for each mission type\r\n        for (uint256 i = 0; i < 7; i++) {\r\n            breakdown[i] = reservedFunds[MissionType(i)];   // Fill the array with the reserved funds for each mission type\r\n        }\r\n        return breakdown;                                   // Return the breakdown of reserved funds\r\n    }\r\n\r\n    /**\r\n     * @dev Receives funds sent to the contract.\r\n     * This function is called when the contract receives CRO without any data.\r\n     * It allows the contract to accept CRO transfers.\r\n     */\r\n    receive()                                                               external payable {}\r\n\r\n    /**\r\n     * @dev Fallback function to receive CRO.\r\n     * This function is called when the contract receives CRO without any data.\r\n     * It allows the contract to accept CRO transfers.\r\n     */\r\n    fallback()                                                              external payable {}\r\n\r\n    /**\r\n     * @dev Withdraws funds from the MissionFactory contract.\r\n     * This function allows the owner or an authorized address to withdraw funds from the contract.\r\n     * This function shall only be called if the contract is not in use anymore and all missions have ended.\r\n     * It transfers the specified amount of funds to the owner of the MissionFactory contract.\r\n     * @param amount The amount of funds to withdraw. If 0, withdraws all available funds.\r\n     */\r\n    function withdrawFunds(uint256 amount)                                  external onlyOwner nonReentrant {\r\n        address mgrOwner = owner();                                         // Get the owner of the MissionFactory contract\r\n        require(mgrOwner != address(0), \"Invalid manager owner\");           // Ensure the manager owner is valid\r\n        if (amount == 0) {\r\n            amount = address(this).balance;                                 // If no amount specified, withdraw all funds\r\n        }\r\n        require(amount <= address(this).balance, \"Insufficient balance\");   // Ensure the contract has enough balance to withdraw\r\n        (bool ok, ) = payable(mgrOwner).call{ value: amount }(\"\");          // Attempt to transfer the specified amount to the manager owner\r\n        require(ok, \"Transfer failed\");                                     // Ensure the transfer was successful\r\n        emit FundsWithdrawn(mgrOwner, amount);                              // Emit event for funds withdrawal\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region View Functions\r\n\r\n    /**\r\n     * @dev Returns the missions a player is participating in and their statuses.\r\n     * This function retrieves all missions the player is enrolled in and their current statuses.\r\n     * @param player The address of the player to check.\r\n     * @return joined An array of addresses of the missions the player is enrolled in.\r\n     * @return statuses An array of statuses corresponding to each mission.\r\n     */\r\n    function getPlayerParticipation(address player)                         public view returns (address[] memory, Status[] memory, string[] memory) {\r\n        uint256 len = missions.length;                                      // Get the total number of missions\r\n        uint256 count;                                                      // Variable to count how many missions the player is in\r\n\r\n        // First pass: count how many missions the player is in\r\n        for (uint256 i = len; i > 0; i--) {                                 // Loop through the missions from newest to oldest\r\n            if (Mission(payable(missions[i - 1])).isPlayer(player)) {       // Check if the player is enrolled in the mission\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Allocate return arrays\r\n        address[] memory joined     = new address[](count);                 // Create an array to hold the addresses of the missions the player is in\r\n        Status[]  memory statuses   = new Status[](count);                  // Create an array to hold the statuses of the missions the player is in    \r\n        string[]  memory names      = new string[](count);                  // Create an array to hold the mission names\r\n        uint256 idx;                                                        // Index for the return arrays\r\n\r\n        // Second pass: fill both arrays\r\n        for (uint256 i = len; i > 0; i--) {                                 // Loop through the missions from newest to oldest\r\n            address m = missions[i - 1];                                    // Get the address of the current mission\r\n            if (Mission(payable(m)).isPlayer(player)) {                     // Check if the player is enrolled in the mission\r\n                joined[idx]   = m;                                          // Add the mission address to the joined array                          \r\n                statuses[idx] = Mission(payable(m)).getRealtimeStatus();    // Get the realtime status of the mission and add it to the statuses array\r\n                names[idx] = missionNames[m];                               // Add the mission name to the output array\r\n                idx++;                                                      // Increment the index for the return arrays\r\n            }\r\n        }\r\n        return (joined, statuses, names);                                   // Return arrays: addresses of missions not ended, their statuses and names \r\n    }\r\n\r\n    /**\r\n     * @dev Returns a summary of the factory's state.\r\n     * This function returns various details about the factory, including owner address, implementation address, total missions, limits, funds, and mission success/failure counts.\r\n     * @return ownerAddress The address of the owner of the factory.\r\n     * @return factoryAddress The address of the factory contract.\r\n     * @return implementation The address of the mission implementation contract.\r\n     * @return totalMissions The total number of missions created.\r\n     * @return weekly The weekly enrollment limit.\r\n     * @return monthly The monthly enrollment limit.\r\n     * @return missionFunds The total funds registered by missions.\r\n     * @return ownerFunds The total funds earned by the owner from missions.\r\n     * @return successes The total number of successful missions.\r\n     * @return failures The total number of failed missions.\r\n     * @return fundsPerTypeArray An array containing the reserved funds for each mission type (1–6).\r\n     */\r\n    function getFactorySummary()                                            public view\r\n        returns (\r\n            address ownerAddress,\r\n            address factoryAddress,\r\n            address implementation,\r\n            uint256 totalMissions,\r\n            uint256 weekly,\r\n            uint256 monthly,\r\n            uint256 missionFunds,\r\n            uint256 ownerFunds,\r\n            uint256 successes,\r\n            uint256 failures,\r\n            uint256[] memory fundsPerTypeArray\r\n        ) {\r\n        uint256 enumLength = uint256(type(MissionType).max) + 1;\r\n\t\tuint256[] memory breakdown = new uint256[](enumLength);\r\n\t\tfor (uint256 i = 0; i < enumLength; i++) {\r\n\t\t\tbreakdown[i] = reservedFunds[MissionType(i)];\r\n\t\t}\r\n        return (\r\n            owner(),                // Return the address of the owner of the factory contract\r\n            address(this),          // Return the address of the factory contract\r\n            missionImplementation,  // Return the address of the mission implementation contract\r\n            missions.length,        // Return the total number of missions\r\n            weeklyLimit,            // Return the weekly limit\r\n            monthlyLimit,           // Return the weekly and monthly limits\r\n            totalMissionFunds,      // Return the total funds registered by missions\r\n            totalOwnerEarnedFunds,  // Return the total funds registered by missions and earned by the owner\r\n            totalMissionSuccesses,  // Return the total number of successful missions\r\n            totalMissionFailures,   // Return the total number of successful and failed missions\r\n            breakdown               // Return the reserved funds for each mission type\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the status of a mission.\r\n     * @param missionAddress The address of the mission to check.\r\n     * @return mission data of the mission.\r\n     */\r\n    function getMissionData(address missionAddress)                         external view returns (Mission.MissionData memory) {\r\n        require(missionAddress != address(0), \"Invalid mission address\");          // Ensure mission address is valid\r\n        return Mission(payable(missionAddress)).getMissionData();                           // Return the mission data from the Mission contract\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of missions.\r\n     * This function returns the length of the missions array, which contains all mission addresses.\r\n     * @return The total number of missions.\r\n     */\r\n    function getTotalMissions()                                             external view returns (uint256) {\r\n        return missions.length;             // Return the total number of missions\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses and statuses of all missions.\r\n     * This function retrieves all missions and their statuses, filtering out old missions.\r\n     * @return An array of mission addresses and an array of their corresponding statuses.\r\n     */\r\n    function getAllMissions()                                               external view returns (address[] memory, Status[] memory, string[] memory) {\r\n        uint256 nowTs = block.timestamp;                                            // Get the current timestamp\r\n        uint256 len = missions.length;\r\n        if (len == 0) {                                                             // If there are no missions, return empty arrays\r\n            return (new address[](0), new Status[](0), new string[](0));\r\n        }\r\n\r\n        uint256 startCutoff = nowTs - 60 days;                                      // skip if missionStart < startCutoff\r\n        uint256 endCutoff   = nowTs - 30 days;                                      // skip if (ended) missionEnd < endCutoff\r\n        uint256 count;\r\n\r\n        // FIRST PASS ── count how many to return, scanning newest → oldest\r\n        for (uint256 i = len; i > 0;) {\r\n            unchecked { --i; }                                                      // safe because we check i>0 first\r\n            address m = missions[i];\r\n            Status  s = missionStatus[m];\r\n            Mission.MissionData memory md = Mission(payable(m)).getMissionData();\r\n\r\n            bool tooOld =\r\n                md.missionStart < startCutoff &&                                    // started > 60 days ago\r\n                (s == Status.Success || s == Status.Failed)\r\n                    ? md.missionEnd < endCutoff                                     // …and ended/failed > 30 days ago\r\n                    : md.missionStart < startCutoff;                                // or is still running but started > 60 days ago\r\n\r\n            if (tooOld) {\r\n                break;                                                              // every earlier mission will be older ⇒ stop\r\n            }\r\n            count++;\r\n        }\r\n\r\n        // SECOND PASS ── copy the selected missions into fixed-size arrays\r\n        address[] memory outAddrs  = new address[](count);                          // Create an array to hold the addresses of the missions\r\n        Status[]  memory outStatus = new Status[](count);                           // Create an array to hold the statuses of the missions\r\n        string[]  memory names     = new string[](count);                           // Create an array to hold the mission names\r\n        uint256 j;\r\n\r\n        for (uint256 i = len; i > 0 && j < count;) {                                // Loop through the missions from newest to oldest\r\n            unchecked { --i; }\r\n            address m = missions[i];                                                // Get the address of the current mission\r\n            Status  s = missionStatus[m];                                           // Get the status of the current mission    \r\n            Mission.MissionData memory md = Mission(payable(m)).getMissionData();   // Get the mission data for the current mission\r\n\r\n            bool tooOld =\r\n                md.missionStart < startCutoff &&\r\n                (s == Status.Success || s == Status.Failed)                         // If the mission has ended or failed, check if it ended more than 30 days ago\r\n                    ? md.missionEnd < endCutoff\r\n                    : md.missionStart < startCutoff;\r\n\r\n            if (tooOld) {                                                           // If the mission is too old, skip it\r\n                break;\r\n            }\r\n            outAddrs[j]  = m;                                                       // Add the mission address to the output array  \r\n            outStatus[j] = s;                                                       // Add the mission status to the output array\r\n            names[j] = missionNames[m];                                             // Add the mission name to the output array\r\n            unchecked { ++j; }                                                      // Increment the index for the output arrays\r\n        }\r\n\r\n        return (outAddrs, outStatus, names);                                        // Return arrays: addresses of missions not ended, their statuses and names \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of missions filtered by status.\r\n     * This function filters missions based on their status and returns an array of mission addresses that match the specified status.\r\n     * @param s The status to filter missions by.\r\n     * @return An array of mission addresses and an array of their corresponding statuses.\r\n     */\r\n    function getMissionsByStatus(Status s)                                  external view returns (address[] memory, uint8[] memory, string[] memory) {\r\n        uint256 len = missions.length;                              // Get the total number of missions\r\n        uint256 count;\r\n\r\n        // First pass: count missions with the specified status\r\n        for (uint256 i = 0; i < len; i++) {                         // Loop through all missions\r\n            if (missionStatus[missions[i]] == s) {                  // If the mission status matches the specified status\r\n                count++;                                            // Increment the count of matching missions\r\n            }\r\n        }\r\n\r\n        // Second pass: populate result arrays\r\n        address[] memory filteredMissions = new address[](count);   // Create an array to hold the addresses of matching missions\r\n        uint8[]   memory statuses         = new uint8[](count);     // Create a parallel array for statuses\r\n        string[]  memory names            = new string[](count);    // Create an array to hold the mission names\r\n        uint256 index;\r\n        for (uint256 i = 0; i < len; i++) {                         // Loop through all missions again\r\n            if (missionStatus[missions[i]] == s) {                  // If the mission status matches the specified status\r\n                filteredMissions[index] = missions[i];              // Add the mission address to the result array\r\n                statuses[index] = uint8(s);                         // Add the known status\r\n                names[index] = missionNames[missions[i]];           // Add the mission name to the output array\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return (filteredMissions, statuses, names);                 // Return arrays: addresses of missions not ended, their statuses and names \r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the addresses of missions that have not ended.\r\n     * This function filters out missions that are in the Ended or Failed status.\r\n     * @return An array of mission addresses and an array of their corresponding statuses.\r\n     */\r\n    \r\n    function getMissionsNotEnded()                                          external view returns (address[] memory, uint8[] memory, string[] memory) {\r\n        uint256 len = missions.length;                          // Get the total number of missions \r\n        uint256 count;                                          // Variable to count how many missions are not ended    \r\n\r\n        // First pass: count how many missions are not ended\r\n        for (uint256 i = 0; i < len; i++) {                     // Loop through all missions    \r\n            Status s = missionStatus[missions[i]];\r\n            if (s != Status.Success && s != Status.Failed) {    // If the mission is not in Success or Failed status\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Second pass: populate arrays\r\n        address[] memory result   = new address[](count);       // Create an array to hold the addresses of missions that are not ended\r\n        uint8[]   memory statuses = new uint8[](count);         // Create a parallel array for statuses\r\n        string[]  memory names    = new string[](count);        // Create an array to hold the mission names\r\n        uint256 index;\r\n\r\n        for (uint256 i = 0; i < len; i++) {                     // Loop through all missions again\r\n            Status s = missionStatus[missions[i]];              // Get the status of the current mission\r\n            if (s != Status.Success && s != Status.Failed) {    // If the mission is not in Success or Failed status\r\n                result[index] = missions[i];                    // Add the mission address to the result array\r\n                statuses[index] = uint8(s);                     // Add the status to the statuses array\r\n                names[index] = missionNames[missions[i]];       // Add the mission name to the output array\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return (result, statuses, names);                       // Return arrays: addresses of missions not ended, their statuses and names  \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of missions that have ended.\r\n     * This function filters out missions that are in the Ended or Failed status.\r\n     * @return An array of mission addresses and an array of their corresponding statuses.\r\n     */\r\n    function getMissionsEnded()                                             external view returns (address[] memory, uint8[] memory, string[] memory) {\r\n        uint256 len = missions.length;                          // Get the total number of missions\r\n        uint256 count;                                          // Variable to count how many missions have ended\r\n\r\n        // First pass: count how many missions are ended\r\n        for (uint256 i = 0; i < len; i++) {                     // Loop through all missions\r\n            Status s = missionStatus[missions[i]];              // Get the status of the current mission\r\n            if (s == Status.Success || s == Status.Failed) {    // If the mission is in Success or Failed status\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Second pass: populate arrays\r\n        address[] memory result   = new address[](count);       // Create an array to hold the addresses of missions that have ended\r\n        uint8[]   memory statuses = new uint8[](count);         // Create a parallel array for statuses\r\n        string[]  memory names    = new string[](count);        // Create an array to hold the mission names\r\n        uint256 index;\r\n\r\n        for (uint256 i = 0; i < len; i++) {                     // Loop through all missions again\r\n            Status s = missionStatus[missions[i]];              // Get the status of the current mission\r\n            if (s == Status.Success || s == Status.Failed) {    // If the mission is in Success or Failed status\r\n                result[index] = missions[i];                    // Add the mission address to the result array  \r\n                statuses[index] = uint8(s);                     // Add the status to the statuses array\r\n                names[index] = missionNames[missions[i]];       // Add the mission name to the output array\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return (result, statuses, names);                       // Return arrays: addresses of missions not ended, their statuses and names  \r\n    }\r\n\r\n    /**\r\n     * @dev Returns a paginated list of missions that have ended.\r\n     * This function retrieves a subset of missions that have ended, based on the specified offset and limit.\r\n     * @param offset The starting index for pagination.\r\n     * @param limit The maximum number of missions to return.\r\n     * @return addrs An array of mission addresses that have ended.\r\n     * @return statuses An array of statuses corresponding to each mission.\r\n     * @return names An array of mission names corresponding to each mission.\r\n     */\r\n    function getMissionsEndedPaged(uint256 offset, uint256 limit)           external view returns (address[] memory addrs, uint8[] memory statuses, string[] memory names) {\r\n        uint256 len = missions.length;\r\n        if (offset >= len) {\r\n            // IMPORTANT: construct arrays with [] length, not bare types\r\n            addrs    = new address[](0);\r\n            statuses = new uint8[](0);\r\n            names    = new string[](0);\r\n            return (addrs, statuses, names);\r\n        }\r\n\r\n        uint256 to = offset + limit;\r\n        if (to > len) to = len;\r\n\r\n        // First pass: count ended in the window\r\n        uint256 count;\r\n        for (uint256 i = offset; i < to; i++) {\r\n            Status s = missionStatus[missions[i]];\r\n            if (s == Status.PartlySuccess || s == Status.Success || s == Status.Failed) {\r\n                unchecked { count++; }\r\n            }\r\n        }\r\n\r\n        // Allocate exact-size arrays\r\n        addrs    = new address[](count);\r\n        statuses = new uint8[](count);\r\n        names    = new string[](count);\r\n\r\n        // Second pass: fill results\r\n        uint256 k;\r\n        for (uint256 i = offset; i < to; i++) {\r\n            address m = missions[i];\r\n            Status  s = missionStatus[m];\r\n            if (s == Status.PartlySuccess || s == Status.Success || s == Status.Failed) {\r\n                addrs[k]    = m;\r\n                statuses[k] = uint8(s);\r\n                names[k]    = missionNames[m];\r\n                unchecked { k++; }\r\n            }\r\n        }\r\n\r\n        return (addrs, statuses, names);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of the latest n missions.\r\n     * This function retrieves the last n missions from the list of all missions.\r\n     * @param n The number of latest missions to return.\r\n     * @return An array of mission addresses and an array of their corresponding statuses.\r\n     */\r\n    function getLatestMissions(uint256 n)                                   external view returns (address[] memory, uint8[] memory, string[] memory) {\r\n        uint256 total = missions.length;                    // Get the total number of missions\r\n        if (n > total) n = total;                           // If n is greater than the total number of missions, adjust n to total\r\n\r\n        address[] memory result   = new address[](n);       // Create an array to hold the addresses of the latest missions\r\n        uint8[]   memory statuses = new uint8[](n);         // Create a parallel array for statuses\r\n        string[]  memory names    = new string[](n);        // Create an array to hold the mission names\r\n\r\n        for (uint256 i = 0; i < n; i++) {                   // Loop through the last n missions\r\n            address m = missions[total - 1 - i];            // Get the address of the mission\r\n            result[i] = m;                                  // Add the mission address to the result array  \r\n            statuses[i] = uint8(missionStatus[m]);          // Add the status of the mission to the statuses array\r\n            names[i] = missionNames[m];                     // Add the mission name to the output array\r\n       }\r\n\r\n        return (result, statuses, names);                   // Return arrays: addresses of missions not ended, their statuses and names  \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved funds for a specific mission type.\r\n     * @param _type The type of the mission to check.\r\n     * @return The amount of reserved funds for the specified mission type.\r\n     */\r\n    function getFundsByType(MissionType _type)                              external view returns (uint256) {\r\n        return reservedFunds[_type];                                                // Return the reserved funds for the specified mission type\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the proposal data\r\n     * @return newOwner the stored newOwner proposal\r\n     * @return proposer the proposer\r\n     * @return timestamp the time of the proposal\r\n     * @return timeLeft the time left\r\n     */   \r\n    function getOwnershipProposal()                                         external view returns (address newOwner, address proposer, uint256 timestamp, uint256 timeLeft) {\r\n        if (proposalTimestamp == 0) {\r\n            return (address(0), address(0), 0, 0);                              // No active proposal\r\n        }\r\n\r\n        uint256 expiry = proposalTimestamp + OWNERSHIP_PROPOSAL_WINDOW;\r\n        uint256 nowTs = block.timestamp;\r\n\r\n        if (nowTs >= expiry) {\r\n            return (proposedNewOwner, proposalProposer, proposalTimestamp, 0);  // Expired\r\n        }\r\n\r\n        return (\r\n            proposedNewOwner,\r\n            proposalProposer,\r\n            proposalTimestamp,\r\n            expiry - nowTs                                                      // Seconds remaining until expiry\r\n        );\r\n    }\r\n    // #endregion\r\n    // #endregion\r\n}\r\n\r\n\r\n\r\n\r\n// #region Contract Mission\r\ncontract Mission        is Ownable, ReentrancyGuard {\r\n\r\n\r\n\r\n\r\n    // #region Events\r\n    event MissionStatusChanged  (Status     indexed previousStatus, Status      indexed newStatus,      uint256 timestamp                   );\r\n    event PlayerEnrolled        (address    indexed player,         uint256             amount,         uint256 totalPlayers                );\r\n    event RoundCalled           (address    indexed player,         uint8       indexed roundNumber,    uint256 payout, uint256 croRemaining);\r\n    event PlayerRefunded        (address    indexed player,         uint256             amount                                              );\r\n    event FundsWithdrawn        (uint256            ownerAmount,    uint256             factoryAmount                                       );\r\n    event RefundFailed          (address    indexed player,         uint256             amount                                              ); \r\n    event MissionRefunded       (uint256    indexed nrOfPlayers,    uint256     indexed amount,         address[] player,  uint256 timestamp); // Event emitted when a player is refunded\r\n    event MissionInitialized    (address    indexed owner,          MissionType indexed missionType,    uint256 timestamp                   );\r\n\tevent PotIncreased\t\t\t(uint256\t\t\tvalue,\t\t\tuint256\t\t\t\tcroCurrent\t\t\t\t\t\t\t\t\t\t\t);\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Player custom errors\r\n    error EnrollmentNotStarted(uint256 nowTs, uint256 startTs);     // Enrollment has not started yet.\r\n    error EnrollmentClosed(uint256 nowTs, uint256 endTs);           // Enrollment is closed.\r\n    error MaxPlayers(uint8 maxPlayers);                             // Maximum number of players has been reached.  \r\n    error WrongEntryFee(uint256 expected, uint256 sent);            // The entry fee sent does not match the expected amount.\r\n    error AlreadyJoined();                                          // Player has already joined the mission.\r\n    error WeeklyLimit(uint256 secondsLeft);                         // Weekly  limit for mission enrollments has been reached.\r\n    error MonthlyLimit(uint256 secondsLeft);                        // Monthly limit for mission enrollments has been reached.\r\n    error Cooldown(uint256 secondsLeft);                            // Cooldown period is still active, cannot join a new mission.\r\n    error NotActive(uint256 nowTs, uint256 missionStart);           // Mission is not active yet.\r\n    error MissionEnded();                                           // Mission has already ended.\r\n    error AlreadyWon();                                             // Player has already won in a previous round.\r\n    error NotJoined();                                              // Player has not joined the mission.\r\n    error AllRoundsDone();                                          // All rounds of the mission have been completed.\r\n    error PayoutFailed(address winner, uint256 amount, bytes data); // Payout to a winner failed.\r\n    error ContractsNotAllowed();                                    // Contracts are not allowed to join the mission.\r\n    // #endregion \r\n\r\n\r\n\r\n\r\n\r\n    // #region Modifiers\r\n    /**\r\n     * @dev Modifier to restrict access to the owner or an authorized address.\r\n     * This is used for functions that can only be called by the owner or an authorized address.\r\n     */\r\n    modifier onlyOwnerOrAuthorized() {\r\n        require(\r\n            msg.sender == owner() || missionFactory.authorized(msg.sender),\r\n            \"Not owner or authorized\"\r\n        );\r\n        _;\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Structs \r\n    /**\r\n     * @dev Struct to hold information about players who won the mission.\r\n     * Contains the player's address and the amount they won.\r\n     */\r\n    struct PlayersWon {\r\n        address player;                     // Address of the player who won\r\n        uint256 amountWon;                  // Amount won by the player\r\n    }\r\n\r\n    /**\r\n     * @dev Struct to hold all mission data.\r\n     * Contains information about players, mission status, enrollment details, and financials.\r\n     */\r\n    struct MissionData {\r\n        address[]       players;                        // Array to hold addresses of players enrolled in the mission\r\n        MissionType     missionType;                    // Type of the mission\r\n        uint256         enrollmentStart;                // Start and end times for enrollment\r\n        uint256         enrollmentEnd;                  // Start and end times for enrollment\r\n        uint256         enrollmentAmount;               // Amount required for enrollment\r\n        uint8           enrollmentMinPlayers;           // Minimum number of players required to start the mission\r\n        uint8           enrollmentMaxPlayers;           // Maximum number of players allowed in the mission\r\n        uint8\t\t\troundPauseDuration;\t\t\t    // Cooldown duration: rounds before the penultimate round\r\n        uint8\t\t\tlastRoundPauseDuration;\t\t    // Cooldown duration: before final round\r\n        uint256         missionStart;                   // Start time for the mission\r\n        uint256         missionEnd;                     // End time for the mission\r\n        uint8           missionRounds;                  // Total number of rounds in the mission\r\n        uint8           roundCount;                     // Current round count  \r\n        uint256         croStart;                       // Initial CRO amount at the start of the mission\r\n        uint256         croCurrent;                     // Current CRO amount in the mission\r\n        PlayersWon[]    playersWon;                     // Array to hold players who won in the mission     \r\n        uint256         pauseTimestamp;                 // Time when the mission was paused\r\n        address[]       refundedPlayers;                // Track players who have been refunded\r\n        string          name;                           // Name of the mission\r\n        uint256         missionCreated;                 // Timestamp of when the mission was created, used for 'Pending' stage in dApp\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region State Variables\r\n    /**\r\n     * @dev Reference to the MissionFactory contract.\r\n     * This contract manages the overall mission lifecycle and player interactions.\r\n     */\r\n    MissionFactory              public  missionFactory;                 // Reference to the MissionFactory contract\r\n    mapping(address => bool)    public  enrolled;                       // Track if a player is enrolled in the mission\r\n    mapping(address => bool)    public  hasWon;                         // Track if a player has won in any round\r\n    mapping(address => bool)    public  refunded;                       // Track if a player has been refunded\r\n    mapping(address => uint256) public  failedRefundAmounts;            // Track failed refund amounts for players\r\n    uint256                     public  ownerShare;                     // Total share of funds for the owner\r\n    uint256                     public  factoryShare;                   // Total share of funds for the MissionFactory\r\n    bool                        public  missionStartConditionChecked = false; // Flag to check if the mission start condition has been checked\r\n    MissionData                 private _missionData;                   // Struct to hold all mission data  \r\n    bool                        private _initialized;                   // Flag to track if the contract has been initialized\r\n    Status                      private _previousStatus;                // Track the previous status of the mission\r\n\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Constructor-Initializer\r\n    // ────────────────── Constructor ───────────────────\r\n    /**\r\n     * @dev Constructor for the Mission contract.\r\n     * Initializes the contract with the owner set to address(0) to prevent accidental ownership.\r\n     * The actual ownership will be set during the initialization phase.\r\n     */\r\n    constructor() Ownable(msg.sender) {}      \r\n    // ────────────────── Initializer ───────────────────\r\n    /**\r\n     * @dev Initializes the Mission contract.\r\n     * This function sets the initial values for the mission and registers it with the MissionFactory.\r\n     * It can only be called once during contract deployment.\r\n     * @param _owner                The address of the owner of the contract.\r\n     * @param _missionFactory            The address of the MissionFactory contract.\r\n     * @param _missionType          The type of the mission.\r\n     * @param _enrollmentStart      The start time for enrollment.\r\n     * @param _enrollmentEnd        The end time for enrollment.\r\n     * @param _enrollmentAmount     The amount required for enrollment.\r\n     * @param _enrollmentMinPlayers The minimum number of players required to start the mission.\r\n     * @param _enrollmentMaxPlayers The maximum number of players allowed in the mission.\r\n     * @param _missionStart         The start time for the mission.\r\n     * @param _missionEnd           The end time for the mission.\r\n     * @param _missionRounds        The number of rounds in the mission.\r\n     */ \r\n    function initialize(\r\n        address         _owner,\r\n        address         _missionFactory,\r\n        MissionType     _missionType,\r\n        uint256         _enrollmentStart,\r\n        uint256         _enrollmentEnd,\r\n        uint256         _enrollmentAmount,\r\n        uint8           _enrollmentMinPlayers,\r\n        uint8           _enrollmentMaxPlayers,\r\n\t\tuint8\t\t\t_roundPauseDuration,\r\n\t\tuint8\t\t\t_lastRoundPauseDuration,\r\n        uint256         _missionStart,\r\n        uint256         _missionEnd,\r\n        uint8           _missionRounds,\r\n        string calldata _name\r\n    )                                       external payable nonReentrant {\r\n        require(!_initialized, \"Already initialized\");                          // Ensure the contract is not already initialized\r\n\r\n        _initialized = true;\r\n\r\n        _transferOwnership(_owner);\r\n        missionFactory = MissionFactory(payable(_missionFactory));              // Set the MissionFactory contract reference\r\n\r\n        // Initialize mission data\r\n        _missionData.missionType             = _missionType;\r\n        _missionData.enrollmentStart         = _enrollmentStart;\r\n        _missionData.enrollmentEnd           = _enrollmentEnd;\r\n        _missionData.enrollmentAmount        = _enrollmentAmount;\r\n        _missionData.enrollmentMinPlayers    = _enrollmentMinPlayers;\r\n        _missionData.enrollmentMaxPlayers    = _enrollmentMaxPlayers;\r\n\t\t_missionData.roundPauseDuration\t\t = _roundPauseDuration;\r\n\t\t_missionData.lastRoundPauseDuration\t = _lastRoundPauseDuration;\r\n        _missionData.missionStart            = _missionStart;\r\n        _missionData.missionEnd              = _missionEnd;\r\n        _missionData.missionRounds           = _missionRounds;\r\n        _missionData.roundCount              = 0;\r\n        _missionData.croStart                = msg.value;                       // Set initial CRO amount to the value sent during initialization\r\n        _missionData.croCurrent              = msg.value;                       // Set current CRO amount to the value sent during initialization\r\n        _missionData.pauseTimestamp          = 0;                               // Initialize pause time to 0\r\n        _missionData.players                 = new address[](0);                // Initialize players array\r\n        _missionData.playersWon              = new PlayersWon[](0);             // Initialize playersWon array\r\n        _missionData.name                    = _name;\r\n        _missionData.missionCreated          = block.timestamp;\r\n        emit MissionInitialized(_owner, _missionType, block.timestamp);         // Emit event for mission initialization\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Core Mission Functions\r\n    /**\r\n     * @notice Allows a player to enroll by paying the enrollment fee.\r\n     * @dev Player can enroll only during the enrollment window and only once.\r\n     * @dev Reverts if:\r\n     *      - Player is a contract\r\n     *      - Enrollment period not open\r\n     *      - Max players reached\r\n     *      - Insufficient CRO sent\r\n     *      - Player has already enrolled\r\n     *      - Player has reached their weekly/monthly limit\r\n     */\r\n    function enrollPlayer()                 external payable nonReentrant {\r\n        uint256 nowTs = block.timestamp;                                                    // Get the current timestamp\r\n        address player = msg.sender;                                                        // Get the address of the player enrolling  \r\n\r\n        if (player.code.length > 0) {\r\n            revert ContractsNotAllowed();                                                   // Ensure that contracts cannot enroll in the mission\r\n        }\r\n        if (nowTs < _missionData.enrollmentStart) {\r\n            revert EnrollmentNotStarted(nowTs, _missionData.enrollmentStart);               // Check if enrollment has started\r\n        }\r\n        if (nowTs > _missionData.enrollmentEnd) {\r\n            revert EnrollmentClosed(nowTs, _missionData.enrollmentEnd);                     // Check if enrollment has ended\r\n        }\r\n\r\n        if (_missionData.players.length >= _missionData.enrollmentMaxPlayers) {\r\n            revert MaxPlayers(_missionData.enrollmentMaxPlayers);                           // Check if maximum players limit has been reached\r\n        }\r\n        if (msg.value != _missionData.enrollmentAmount) {\r\n            revert WrongEntryFee(_missionData.enrollmentAmount, msg.value);                 // Check if the sent CRO matches the required enrollment amount\r\n        }\r\n        if (enrolled[player]) revert AlreadyJoined();\r\n\r\n        (bool ok, Limit breach) = missionFactory.canEnroll(player);                         // Check if the player can enroll based on anti-addiction limits    \r\n        if (!ok) {                                                                          // If the player cannot enroll, revert with the appropriate limit breach error\r\n            if (breach == Limit.Weekly) {                                                   \r\n                revert WeeklyLimit(\r\n                    missionFactory.secondsTillWeeklySlot(player)                            // Revert with the time left until the next weekly slot\r\n                );\r\n            } else {                     \r\n                revert MonthlyLimit(\r\n                    missionFactory.secondsTillMonthlySlot(player)                           // Revert with the time left until the next monthly slot    \r\n                );\r\n            }\r\n        }\r\n\r\n        _missionData.players.push(player);                                                  // Add the player to the players array\r\n        enrolled[player] = true;                                                            // Mark the player as enrolled\r\n        _missionData.croStart += msg.value;                                                 // Increase the initial CRO amount by the enrollment fee\r\n        _missionData.croCurrent += msg.value;                                               // Increase the current CRO amount by the enrollment fee\r\n\r\n        if (_previousStatus != Status.Enrolling) {\r\n            _setStatus(Status.Enrolling);                                                   // Set the mission status to Enrolling\r\n        }\r\n        missionFactory.recordEnrollment(player);                                            // Record the player's enrollment in the MissionFactory contract\r\n        emit PlayerEnrolled(player, msg.value, _missionData.players.length);                // Emit event for player enrollment\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the mission's conditions are met to start.\r\n     * Only callable by the owner or an authorized address\r\n     * This function must be called after the enrollment period ends and before the mission starts to\r\n     * refund players if the conditions are not met. If calling the function is obmitted, \r\n     * calling refundPlayers() is the last chance to refund players.\r\n     * @dev If conditions are not met, sets status to Failed and refunds players.\r\n     */\r\n    function checkMissionStartCondition()   external nonReentrant onlyOwnerOrAuthorized { \r\n        uint256 nowTs = block.timestamp;                                                    // Get the current timestamp\r\n        require(nowTs > _missionData.enrollmentEnd && nowTs < _missionData.missionStart, \r\n                 \"Mission not in arming window. Call refundPlayers instead\");               // Ensure mission is in the correct time window to check start conditions\r\n        require(missionStartConditionChecked == false, \"Already checked start condition\");  // Ensure the start condition has not been checked yet\r\n        missionStartConditionChecked = true;                                                // Set the flag to indicate that the mission start condition has been checked\r\n        if (_missionData.players.length == 0) {                                             // If no players enrolled, set status to Failed and withdraw funds\r\n            _setStatus(Status.Failed);                                                      // Set the mission status to Failed \r\n            _withdrawFunds(true);                                                           // Withdraw funds and refund players\r\n            return;\r\n        }\r\n        if (_missionData.players.length < _missionData.enrollmentMinPlayers) {\r\n            _setStatus(Status.Failed);                                                      // If not enough players, refund and set status to Failed\r\n            _refundPlayers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a player to claim a round reward.\r\n     * @dev A player can only win once. The mission must be Active and not expired.\r\n     * @dev After each round, the mission is Paused for:\r\n     *      - 5 minutes for normal rounds\r\n     *      - 1 minute before the final round\r\n     * @dev Emits {RoundClaimed}.\r\n     * @dev Reverts if:\r\n     *      - Mission is in Paused status\r\n     *      - Mission is not Active\r\n     *      - Player has already won a round\r\n     *      - Player is not enrolled in the mission\r\n     *      - All rounds have been claimed\r\n     *      - Payout transfer fails\r\n     * @dev If it is the last round, sets status to Success and withdraws funds\r\n     */\r\n    function callRound()                    external nonReentrant {\r\n        Status s = _getRealtimeStatus();                                                                                // Get the current real-time status of the mission\r\n        uint256 nowTs = block.timestamp;                                                                                // Get the current timestamp\r\n\r\n        if (s == Status.Paused) {\r\n            uint256 cd = (_missionData.roundCount + 1 == _missionData.missionRounds)                                    // If next round is the last round, use lastRoundPauseDuration\r\n                ? _missionData.lastRoundPauseDuration\r\n                : _missionData.roundPauseDuration;                                                                \t    \r\n            uint256 secsLeft = _missionData.pauseTimestamp + cd - nowTs;                                                // Calculate seconds left in the cooldown period\r\n                                                                    revert Cooldown(secsLeft);                          // Ensure the mission is not in a cooldown period\r\n        }\r\n        if (s < Status.Active)                                      revert NotActive(nowTs, _missionData.missionStart); // Ensure the mission is in Active status\r\n        if (s > Status.Active)                                      revert MissionEnded();                              // Ensure the mission has not ended\r\n        if (hasWon[msg.sender])                                     revert AlreadyWon();                                // Ensure the player has not already won a round\r\n        if (!enrolled[msg.sender])                                  revert NotJoined();                                 // Ensure the player is enrolled in the mission\r\n        if (_missionData.roundCount >= _missionData.missionRounds)  revert AllRoundsDone();                             // Ensure all rounds have not been claimed yet\r\n\r\n        uint256 progress = (nowTs - _missionData.missionStart) * 100                                                    // Calculate the progress percentage of the mission\r\n                        / (_missionData.missionEnd - _missionData.missionStart);\r\n\r\n        uint256 paidSoFar    = _missionData.croStart - _missionData.croCurrent;                                         // total already paid\r\n        uint256 expectedPaid = (_missionData.croStart * progress) / 100;                                                // what should be paid at this progress\r\n        require(expectedPaid >= paidSoFar, \"Progress regression\");\r\n\r\n        uint256 payout = expectedPaid - paidSoFar;\r\n\r\n        if (payout > _missionData.croCurrent) {                                                                         // Optional belt-and-suspenders clamp (prevents any stray underflow, e.g. rounding edge cases)\r\n            payout = _missionData.croCurrent;\r\n        }\r\n        require(payout > 0, \"No incremental payout\");                                                                   // optional: avoids zero-payout “wins”\r\n\r\n        _missionData.croCurrent -= payout;                                                                              // Deduct the payout from the current CRO amount\r\n        _missionData.roundCount++;                                                                                      // Increment the round count\r\n        hasWon[msg.sender] = true;                                                                                      // Mark the player as having won a round\r\n        _missionData.playersWon.push(PlayersWon(msg.sender, payout));                                                   // Add the player and their payout to the playersWon array\r\n\r\n        (bool ok, bytes memory data) = msg.sender.call{ value: payout }(\"\");                                            // Attempt to transfer the payout to the player\r\n        if (!ok)                                                    revert PayoutFailed(msg.sender, payout, data);      // If the transfer fails, revert with an error\r\n\r\n        emit RoundCalled(msg.sender, _missionData.roundCount, payout, _missionData.croCurrent);                         // Emit event for round claim\r\n\r\n        if (_missionData.roundCount == _missionData.missionRounds) {                                                    // If this is the last round, set status to Success\r\n            _setStatus(Status.Success);\r\n            _withdrawFunds(false);\r\n        } else {\r\n            _setStatus(Status.Paused);\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region Financial Functions\r\n\t/**\r\n     * @dev Add funds to prize pool.\r\n     */\r\n\tfunction increasePot()                  external payable {\r\n\t\trequire(msg.value > 0, \"No funds sent\");                                            // Ensure some funds are sent\r\n        require(\r\n            msg.sender == address(missionFactory) || missionFactory.authorized(msg.sender) || msg.sender == owner(),\r\n            \"Only factory or authorized can fund\"\r\n        );                                                                                  // Ensure the sender is the MissionFactory or an authorized address\r\n        require(_getRealtimeStatus() < Status.Active, \"Mission passed activation\");         // Ensure the mission is not already active\r\n\t\t_missionData.croStart \t    += msg.value;                                           // Increase the initial CRO amount by the value sent\r\n\t\t_missionData.croCurrent \t+= msg.value;                                           // Increase the current CRO amount by the value sent\r\n\t\temit PotIncreased(msg.value, _missionData.croCurrent);                              // Emit event for pot increase\r\n\t}\r\n\r\n    /**\r\n     * @dev Refunds players if the mission fails.\r\n     * This function can be called by the owner or an authorized address.\r\n     */\r\n    function refundPlayers()                external nonReentrant onlyOwnerOrAuthorized {\r\n        _refundPlayers();                                                                                           // Call internal refund function\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes remaining CRO after mission completion or failure.\r\n     * @dev Sends:\r\n     *      - 25% to factory owner\r\n     *      - 75% to MissionFactory (for future missions)\r\n     * @dev If `force = true`, also withdraws failed refund amounts.\r\n     */\r\n    function withdrawFunds()                external nonReentrant onlyOwnerOrAuthorized {\r\n        _withdrawFunds(true);                                                                                       // Call internal withdraw function\r\n    }\r\n\r\n    /**\r\n     * @notice Allows owner or authorized to finalize a mission after time expiry.\r\n     * @dev Ends mission and withdraws remaining pot.\r\n     */   \r\n    function forceFinalizeMission()         external onlyOwnerOrAuthorized nonReentrant {\r\n        require(_getRealtimeStatus() == Status.PartlySuccess);  // Ensure mission is in PartlySuccess status\r\n\r\n        _setStatus(Status.Success);                             \r\n        _withdrawFunds(false);                                  // Withdraw funds to MissionFactory contract \r\n    }\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n\r\n    // #region View Functions\r\n\r\n    /**\r\n     * @dev Returns the current number of players enrolled in the mission.\r\n     * This function retrieves the length of the players array in the mission data.\r\n     */\r\n    function getPlayerCount()               public view returns (uint256) {\r\n        return _missionData.players.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the address is a player in the mission.\r\n     * This function checks if the address is present in the players array of the mission data.\r\n     */\r\n    function isPlayer(address addr)         public view returns (bool) {\r\n        require(addr != address(0), \"Invalid address\");                 // Ensure the address is not zero\r\n        return enrolled[addr];                                          // Check if the address is enrolled in the mission                                                                        \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the player state for a given address.\r\n     * This function checks if the player is enrolled and if they have won in any round.\r\n     * @param player The address of the player to check.\r\n     * @return joined A boolean indicating if the player is enrolled in the mission.\r\n     * @return won A boolean indicating if the player has won in any round.\r\n     */\r\n    function playerState(address player)    external view returns (bool joined, bool won) {\r\n        return (enrolled[player], hasWon[player]);           // Return the enrollment and win status of the player\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of seconds until the next round starts.\r\n     * This function checks the current real-time status of the mission and calculates the time until the next round.\r\n     * @return The number of seconds until the next round starts, or 0 if the mission is not paused.\r\n     */\r\n    function secondsUntilNextRound()        external view returns (uint256) {\r\n        if (_getRealtimeStatus() != Status.Paused) return 0;                        // If the mission is not paused, return 0\r\n        uint256 cd = (_missionData.roundCount + 1 == _missionData.missionRounds)    // Cooldown duration\r\n            ? _missionData.lastRoundPauseDuration                                   \r\n            : _missionData.roundPauseDuration;\r\n        uint256 nowTs = block.timestamp;                                            // Get the current timestamp\r\n        return _missionData.pauseTimestamp + cd - nowTs;                            // Calculate and return the seconds until the next round starts\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current progress percentage of the mission.\r\n     * This function calculates the progress based on the elapsed time since the mission started.\r\n     * @return The current progress percentage of the mission.\r\n     */\r\n    function currentProgressPct()           external view returns (uint256){\r\n        uint256 nowTs = block.timestamp;                                                                            // Get the current timestamp\r\n        if (nowTs < _missionData.missionStart) {\r\n            return 0;                                                                                               // If the mission has not started, return 0% progress\r\n        }\r\n        if (nowTs >= _missionData.missionEnd) {\r\n            return 100;                                                                                             // If the mission has ended, return 100% progress\r\n        }\r\n        return (nowTs - _missionData.missionStart) * 100 / (_missionData.missionEnd - _missionData.missionStart);   // Calculate progress percentage based on elapsed time\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pending payout for a player based on their progress in the mission.\r\n     * This function calculates the pending payout based on the current progress percentage and the last payout amount.\r\n     * @param player The address of the player to check for pending payout.\r\n     * @return The pending payout amount for the player, or 0 if not applicable.\r\n     */\r\n    function pendingPayout(address player)  external view returns (uint256) {\r\n        uint256 nowTs = block.timestamp;                                        // Get the current timestamp\r\n        Status s = _getRealtimeStatus();                                        // Get the current real-time status of the mission\r\n        if (s != Status.Active && s != Status.Paused) {\r\n            return 0;                                                           // If the mission is not Active or Paused, return 0 pending payout\r\n        }\r\n        if (!enrolled[player]) {\r\n            return 0;                                                           // If the player is not enrolled, return 0 pending payout\r\n        }\r\n        if (hasWon[player]) {\r\n            return 0;                                                           // If the player has already won, return 0 pending payout\r\n        }\r\n        if (nowTs < _missionData.missionStart) {\r\n            return 0;                                                           // If the mission has not started, return 0 pending payout\r\n        }\r\n        if (nowTs >= _missionData.missionEnd) {\r\n            return 0;                                                           // If the mission has ended, return 0 pending payout\r\n        }\r\n        uint256 progress = (nowTs - _missionData.missionStart) * 100 / (_missionData.missionEnd - _missionData.missionStart);  // Calculate progress percentage based on elapsed time\r\n\r\n        uint256 lastAmt = _missionData.playersWon.length > 0                    // Get the last payout amount, or 0 if no payouts have been made\r\n            ? _missionData.playersWon[_missionData.playersWon.length-1].amountWon\r\n            : 0;\r\n        uint256 lastProg = (lastAmt * 100) / _missionData.croStart;             // Calculate the last progress percentage based on the last payout amount\r\n\r\n        return (progress - lastProg) * _missionData.croStart / 100;             // Calculate pending payout based on progress and last payout\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of remaining rounds in the mission.\r\n     * This function checks the current real-time status of the mission and returns the number of rounds left.\r\n     * @return The number of remaining rounds in the mission, or 0 if the mission is not in Active or Paused status.\r\n     */\r\n    function remainingRounds()              external view returns (uint8) {\r\n        Status s = _getRealtimeStatus();                                        // Get the current real-time status of the mission\r\n        if (s == Status.Active || s == Status.Paused) {\r\n            return _missionData.missionRounds - _missionData.roundCount;        // If the mission is Active or Paused, return remaining rounds\r\n        }\r\n        return 0;                                                               // If the mission is not in Active or Paused status, return 0 remaining rounds\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the MissionData structure.\r\n     */\r\n    function getMissionData()               external view returns (MissionData memory) {\r\n        return _missionData;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current real-time status of the mission.\r\n     * This function checks the current time and mission data to determine the status.\r\n     * @return The current status of the mission.\r\n     */\r\n    function getRealtimeStatus()            external view returns (Status) {\r\n        return _getRealtimeStatus();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the mission is in the arming phase.\r\n     * This function checks if the current time is between the enrollment end and mission start times.\r\n     * @return A boolean indicating if the mission is in the arming phase.\r\n     */\r\n    function isArming()                     public view returns (bool) {\r\n        uint256 nowTs = block.timestamp;\r\n        return (nowTs > _missionData.enrollmentEnd && nowTs < _missionData.missionStart);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the mission is finalized by realtime status, \r\n            not the status set in the factory which can lag behind.\r\n     * This function checks if the mission is in Success or Failed status.\r\n     * @return A boolean indicating if the mission is finalized.\r\n     */ \r\n    function isFinalized()                  public view returns (bool) {\r\n        Status s = _getRealtimeStatus();\r\n        return (s == Status.Success || s == Status.Failed);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of players who have failed refunds.\r\n     * This function iterates through all players and collects those with failed refund amounts.\r\n     * @return An array of player addresses who have failed refunds.\r\n     */\r\n    function getFailedRefundPlayers()       external view returns (address[] memory) {\r\n        require(_getRealtimeStatus() == Status.Failed, \"Mission is not in Failed status\");  // Ensure mission is in Failed status\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < _missionData.players.length; i++) {                         // Iterate through all players\r\n            if (failedRefundAmounts[_missionData.players[i]] > 0) {                         // Check if the player has a failed refund amount   \r\n                count++;\r\n            }\r\n        }\r\n\r\n        address[] memory failedPlayers = new address[](count);                              // Create an array to hold failed refund players    \r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < _missionData.players.length; i++) {                         // Iterate through all players again\r\n            if (failedRefundAmounts[_missionData.players[i]] > 0) {                         // Check if the player has a failed refund amount\r\n                failedPlayers[index++] = _missionData.players[i];                           // Add the player to the failed refund players array    \r\n            }\r\n        }\r\n        return failedPlayers;                                                               // Return the array of failed refund players\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a player has been refunded.\r\n     * This function iterates through the refundedPlayers array to check if the address is present.\r\n     * @param addr The address of the player to check for refund status.\r\n     * @return A boolean indicating if the player has been refunded.\r\n     */ \r\n    function wasRefunded(address addr)      public view returns (bool) {\r\n        require(_getRealtimeStatus() == Status.Failed, \"Mission is not in Failed status\");  // Ensure mission is in Failed status\r\n        require(addr != address(0), \"Invalid address\");                                     // Ensure the address is not zero\r\n        require(enrolled[addr], \"Player not enrolled\");                                     // Ensure the address is enrolled\r\n        for (uint256 i = 0; i < _missionData.refundedPlayers.length; i++) {\r\n            if (_missionData.refundedPlayers[i] == addr) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the array of players who won in the mission.\r\n     * This function retrieves the playersWon array from the mission data.\r\n     */ \r\n    function getWinners()                   external view returns (PlayersWon[] memory) {\r\n        require(_getRealtimeStatus() == Status.Success || _getRealtimeStatus() == Status.PartlySuccess, \r\n                \"Mission is not in Success or PartlySuccess status\");                   // Ensure mission is in Success or PartlySuccess status\r\n        return _missionData.playersWon;                                                 // Return the array of players who won in the mission\r\n    }\r\n\r\n    /// @notice Lightweight roll-up for indexer reconciliation (rarely used)\r\n    function getIndexerSnapshot()           external view returns (uint8 status, uint8 roundCount, uint256 croCurrent, uint32 playersCount, uint32 winnersCount, uint32 refundedCount) {\r\n        Status s = _getRealtimeStatus(); // forward-only except Active<->Paused\r\n        return (\r\n            uint8(s),\r\n            _missionData.roundCount,\r\n            _missionData.croCurrent,\r\n            uint32(_missionData.players.length),\r\n            uint32(_missionData.playersWon.length),\r\n            uint32(_missionData.refundedPlayers.length)\r\n        );\r\n    }\r\n\r\n    /// @notice Return a window of refunded players to avoid huge arrays in one call\r\n    function getRefundedPlayersSlice(uint256 offset, uint256 limit) external view returns (address[] memory slice) {\r\n        address[] storage arr = _missionData.refundedPlayers;\r\n        uint256 len = arr.length;\r\n        if (offset >= len) {\r\n            return new address[](0);\r\n        }\r\n        uint256 to = offset + limit;\r\n        if (to > len) to = len;\r\n        uint256 n = to - offset;\r\n        slice = new address[](n);\r\n        for (uint256 i = 0; i < n; i++) {\r\n            slice[i] = arr[offset + i];\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n\r\n\r\n    // #region Internal Helpers\r\n    /**\r\n     * @dev Returns the current status of the mission based on the current time and mission data.\r\n     * This function checks various conditions to determine the real-time status of the mission.\r\n     * @return status The current status of the mission.\r\n     */ \r\n    function _getRealtimeStatus()           internal view returns (Status status) {\r\n\r\n        // 1. Absolute states never change\r\n        if (_previousStatus == Status.Success || _previousStatus == Status.Failed) {\r\n            return _previousStatus;                                         // mission is already in Success or Failed state, return it\r\n        }\r\n\r\n        uint256 nowTs = block.timestamp;\r\n\r\n        // 2. Before enrollment even opens\r\n        if (nowTs < _missionData.enrollmentStart) {\r\n            return Status.Pending;                                          // mission is not yet open for enrollment\r\n        }\r\n\r\n        // 3. Enrollment window open\r\n        if (nowTs <= _missionData.enrollmentEnd) {\r\n            return Status.Enrolling;                                        // mission is open for enrollment                        \r\n        }\r\n\r\n        // 4. Enrollment closed – decide if we *could* arm\r\n        if (_missionData.players.length < _missionData.enrollmentMinPlayers) {\r\n            return Status.Failed;                                           // not enough players, mission failed   \r\n        }\r\n\r\n        // 5. Waiting for missionStart timestamp\r\n        if (nowTs < _missionData.missionStart) {\r\n            return Status.Arming;                                            // mission is ready to be armed, but not yet started\r\n        }\r\n        \r\n        // 6. Mission active\r\n        if (nowTs < _missionData.missionEnd) {\r\n            if (_missionData.roundCount >= _missionData.missionRounds) {\r\n                return Status.Success;                                      // all rounds completed, mission is successful\r\n            }\r\n            if (_missionData.pauseTimestamp == 0) {\r\n                return Status.Active;                                       // mission is active, no pause in progress\r\n            } else if (nowTs < _missionData.pauseTimestamp +\r\n                ((_missionData.roundCount + 1 == _missionData.missionRounds)\r\n                    ? _missionData.lastRoundPauseDuration\r\n                    : _missionData.roundPauseDuration))\r\n            {\r\n                return Status.Paused;\r\n            }\r\n            else {\r\n                return Status.Active;                                       // mission is active, no pause in progress                   \r\n            }           \r\n        }\r\n        else\r\n        {\r\n            if (_missionData.roundCount == 0) {\r\n                return Status.Failed;                                       // nobody ever called a round → full refund path\r\n            }\r\n            if (_missionData.roundCount < _missionData.missionRounds) {\r\n                return Status.PartlySuccess;                                // some rounds claimed; leftovers need finalization\r\n            }\r\n            return Status.Success;                                          // all rounds claimed\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the status of the mission.\r\n     * @param newStatus The new status to set for the mission.\r\n     */\r\n    function _setStatus(Status newStatus)   internal {\r\n        uint256 nowTs = block.timestamp;                                // Get the current timestamp\r\n        if (newStatus == Status.Enrolling       ||                      // If the new status is one of these, update the mission status in the MissionFactory\r\n            newStatus == Status.Arming          || \r\n            newStatus == Status.Success         ||\r\n            newStatus == Status.PartlySuccess   ||\r\n            newStatus == Status.Failed) \r\n        {  \r\n            missionFactory.setMissionStatus(newStatus);                 // Update the status in MissionFactory\r\n        }\r\n        if (newStatus == Status.Paused) {\r\n            _missionData.pauseTimestamp = nowTs;                        // Record the time when the mission was paused\r\n        }\r\n        else if (newStatus == Status.Active) {\r\n            _missionData.pauseTimestamp = 0;                            // Reset pause time when the mission is active\r\n        }\r\n        emit MissionStatusChanged(_previousStatus, newStatus, nowTs);   // Emit event for status change\r\n        _previousStatus = newStatus;                                    // Update the previous status to the new status\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes remaining CRO after mission completion or failure.\r\n     * @dev Sends:\r\n     *      - 25% to factory owner\r\n     *      - 75% to MissionFactory (for future missions)\r\n     * @dev If `force = true`, also withdraws failed refund amounts.\r\n     */\r\n    function _withdrawFunds(bool force)     internal {\r\n        require(_getRealtimeStatus() == Status.Success || _getRealtimeStatus() == Status.Failed);   // Ensure mission is ended\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0,                                \"No funds to withdraw\");                // Ensure there are funds to withdraw\r\n\r\n        if (_missionData.players.length == 0) {                                                      \r\n            _setStatus(Status.Failed);                                                              // If no players, set status to Failed\r\n        }\r\n        uint256 distributable;\r\n        if (force) {\r\n            distributable = balance;                                                                // If force is true, all funds are distributable\r\n        } else {\r\n            uint256 unclaimable = _getTotalFailedRefunds();                                         // Get total failed refunds for all players  \r\n            if (unclaimable > balance) {                                                            // If unclaimable amount exceeds the balance      \r\n                unclaimable = balance;                                                              // safety check\r\n            }\r\n            distributable = balance - unclaimable;                                                  // Calculate distributable amount by subtracting unclaimable amounts\r\n        }\r\n\r\n        require(distributable > 0,                          \"No funds to withdraw\");                // Ensure there are funds to withdraw after deducting unclaimable amounts\r\n\r\n        uint256 _ownerShare = (distributable * 25) / 100;                                           // Calculate the owner's share (25% of distributable funds)     \r\n        uint256 _factoryShare = distributable - _ownerShare;                                        // Calculate the factory's share (75% of distributable funds)     \r\n\r\n        (bool ok, ) = payable(missionFactory.owner()).call{value: _ownerShare}(\"\");                 // Attempt to transfer the owner's share to the MissionFactory owner\r\n        require(ok,                                         \"Owner transfer failed\");               // Ensure the transfer was successful   \r\n\r\n        missionFactory.registerMissionFunds{ value: _factoryShare }(                                // Register the factory's share in the MissionFactory contract  \r\n            _missionData.missionType                                                                // Pass the mission type\r\n        );\r\n\r\n        emit FundsWithdrawn(_ownerShare, _factoryShare);                                            // Emit event for funds withdrawal\r\n        ownerShare = _ownerShare;                                                                   // Update the owner's share\r\n        factoryShare = _factoryShare;                                                               // Update the factory's share\r\n        _missionData.croCurrent = address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of failed refunds for all players.\r\n     * This function iterates through all players and sums their failed refund amounts.\r\n     * @return total The total amount of failed refunds for all players.\r\n     */\r\n    function _getTotalFailedRefunds()       internal view returns (uint256 total) {\r\n        for (uint256 i = 0; i < _missionData.players.length; i++) {                             // Iterate through all players\r\n            address player = _missionData.players[i];                                           // Get the player address\r\n            total += failedRefundAmounts[player];                                               // Add the player's failed refund amount to the total\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Refunds players if the mission fails.\r\n     * This function is internal and can only be called when the mission is in Failed status.\r\n     * It ensures that the mission has ended and that the enrollment period has passed.\r\n     * It refunds all enrolled players their enrollment amount.\r\n     */\r\n    function _refundPlayers()               internal {\r\n        require(_getRealtimeStatus() == Status.Failed,                  \"Mission not in Failed status\");        // Ensure mission is in Failed status\r\n        require(_missionData.players.length > 0,                         \"No players to refund\");               // Ensure there are players to refund\r\n        bool _force = true;\r\n        for (uint256 i = 0; i < _missionData.players.length; i++) {\r\n            address player = _missionData.players[i];                                                           // Get the player address\r\n            if (!refunded[player]) {                                                                            // Check if player has not been refunded\r\n                (bool ok, ) = payable(player).call{ value: _missionData.enrollmentAmount }(\"\");                 // Attempt to transfer the refund amount to the player\r\n                if (ok) {                                                                                       // If the transfer is successful                                          \r\n                    refunded[player] = true;                                                                    // Mark the player as refunded                        \r\n                    _missionData.refundedPlayers.push(player);                                                  // Add the player to the refundedPlayers array \r\n                    emit PlayerRefunded(player, _missionData.enrollmentAmount);                                 // Emit event for player refund\r\n\r\n                    missionFactory.undoEnrollmentInWindow(                                                      // Notify MissionFactory to undo enrollment\r\n                        player,\r\n                        _missionData.enrollmentStart,\r\n                        _missionData.enrollmentEnd\r\n                    );\r\n                } else {                                                                                        // If the transfer fails                              \r\n                    failedRefundAmounts[player] += _missionData.enrollmentAmount;                               // Record the failed refund amount for the player      \r\n                    emit RefundFailed(player, _missionData.enrollmentAmount);                                   // Emit event for refund failure          \r\n                    _force = false;                                                                             // If any refund fails, do not force withdraw of remaining funds\r\n                }\r\n            }\r\n        }\r\n        _setStatus(Status.Failed);                                                                              // Set the mission status to Failed\r\n        if (address(this).balance > 0) {                                                                        // If there are still funds left in the contract\r\n            _withdrawFunds(_force);                                                                             // Withdraw funds to MissionFactory contract \r\n        }\r\n        emit MissionRefunded(\r\n            _missionData.refundedPlayers.length,                                                                // Emit MissionRefunded event with number of players refunded\r\n            _missionData.enrollmentAmount,                                                                      // Emit MissionRefunded event with amount refunded to each player\r\n            _missionData.refundedPlayers,                                                                       // Emit MissionRefunded event with list of refunded players\r\n            block.timestamp                                                                                     // Emit MissionRefunded event with current timestamp\r\n        );\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}}